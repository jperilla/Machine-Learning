import sys

import pandas as pd

import naiveBayes as nb
from kMeansClustering import KMeansClustering
from machineLearningUtilities import split_test_train, one_hot_encoder, get_num_similarities, \
    calculate_silhouette_coefficient
from stepwiseForwardSelection import StepwiseForwardSelection


def run_on_glass(file):
    """
    This function runs the SFS Algorithm wrapping Naive Bayes to reduce the feature set
    and then runs a K-means clustering algorithm to cluster the data. To test k-means as
    a classifier Naive Bayes is run again with the cluster labels generated by K-means.
    :param file: The file name that includes the data
    :return: Nothing
    """
    print("_______________________________")
    print("Reading in Glass data set...")
    # Read in glass data
    df_glass = pd.read_csv(file, header=None)
    df_glass.columns = ["Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Class"]

    # This data set has no missing values, so we will skip that step

    # Drop Id
    df_glass_all = df_glass.drop('Id', axis=1)

    # One hot code the classes in order to use my previous naive bayes algorithm
    df_glass_encoded = one_hot_encoder(df_glass_all, ["Class"])

    # Split into test and training sets
    x_test, x_train = split_test_train(df_glass_encoded)
    x_test = x_test.reset_index(drop=True)
    x_train = x_train.reset_index(drop=True)

    # Run stepwise forward selection to reduce the feature set
    print("Running SFS on Glass data set...")
    features = df_glass_all.columns.values.tolist()[0:9]
    print("All features...")
    print(features)
    sfs = StepwiseForwardSelection(features, x_train.iloc[:, 0:9], x_test.iloc[:, 0:9],
                                   x_train["Class_1"], x_test["Class_1"], nb.learn, nb.test)
    optimized_feature_set = sfs.run()

    cluster_and_classify(optimized_feature_set, x_test, x_train)


def run_on_iris(file):
    """
    This function runs the SFS Algorithm wrapping Naive Bayes to reduce the feature set
    and then runs a K-means clustering algorithm to cluster the data. To test k-means as
    a classifier Naive Bayes is run again with the cluster labels generated by K-means.
    :param file: The file name that includes the data
    :return: Nothing
    """
    print("_______________________________")
    print("Reading in Iris data set...")
    # Read in iris data
    df_iris = pd.read_csv(file, header=None)
    df_iris.columns = ["sepal length in cm", "sepal width in cm", "petal length in cm", "petal width in cm", "Class"]

    # This data set has no missing values, so we will skip that step

    # One hot code the classes in order to use my previous naive bayes algorithm
    df_iris_encoded = one_hot_encoder(df_iris, ["Class"])

    # Split into test and training sets
    x_test, x_train = split_test_train(df_iris_encoded)
    x_test = x_test.reset_index(drop=True)
    x_train = x_train.reset_index(drop=True)

    # Run stepwise forward selection to reduce the feature set
    print("Run Stepwise forward selection to reduce the feature set on Iris...")
    print("All features...")
    features = df_iris_encoded.columns.values.tolist()[0:4]
    print(features)
    sfs = StepwiseForwardSelection(features, x_train.iloc[:, 0:4], x_test.iloc[:, 0:4],
                                   x_train["Class_Iris-virginica"], x_test["Class_Iris-virginica"], nb.learn, nb.test)
    optimized_feature_set = sfs.run()

    cluster_and_classify(optimized_feature_set, x_test, x_train)


def run_on_spambase(file):
    """
    This function runs the SFS Algorithm wrapping Naive Bayes to reduce the feature set
    and then runs a K-means clustering algorithm to cluster the data. To test k-means as
    a classifier Naive Bayes is run again with the cluster labels generated by K-means.
    :param file: The file name that includes the data
    :return: Nothing
    """
    print("_______________________________")
    print("Reading in Spambase data set...")
    # Read in spambase data
    df_spambase = pd.read_csv(file, header=None)
    df_spambase.rename(columns={57: 'Class'}, inplace=True)

    # This data set has no missing values, so we will skip that step

    # Split into test and training sets
    x_test, x_train = split_test_train(df_spambase)
    x_test = x_test.reset_index(drop=True)
    x_train = x_train.reset_index(drop=True)

    features = df_spambase.columns.values.tolist()[0:56]
    print("Running SFS on Spambase...")
    print("All features...")
    print(features)
    sfs = StepwiseForwardSelection(features, x_train.iloc[:, 0:56], x_test.iloc[:, 0:56],
                                   x_train["Class"], x_test["Class"], nb.learn, nb.test)
    optimized_feature_set = sfs.run()

    cluster_and_classify(optimized_feature_set, x_test, x_train)


def cluster_and_classify(optimized_feature_set, x_test, x_train):
    """This function run the clustering and classification algorithms and
    tests clusters with the silhouette coffecient"""
    # Use k-means to cluster data
    print("Running K Means on Glass data set with optimized feature set...")
    km = KMeansClustering(x_train[optimized_feature_set], 2)
    labels = km.run()
    # Train the training data with the cluster labels using Naive Bayes
    print("Training with Naive Bayes with k-means labels...")
    model = nb.learn(pd.Series(labels), x_train[optimized_feature_set])
    # Test the naive bayes classifier on test data
    print("Testing Naive Bayes Classifier with cluster labels")
    predictions = nb.test(x_test[optimized_feature_set], *model)
    print("Naive Bayes Classifier Performance = " + str(get_num_similarities(labels, predictions) / len(labels) * 100))
    # Find the silhouette coefficient of the clusters
    print("Calculating the silhouette coefficient...")
    sc = calculate_silhouette_coefficient(x_train[optimized_feature_set], labels)
    print("Silhouette Coefficient = " + str(sc))


if __name__== "__main__":
    if len(sys.argv) < 3:
        print("Please add options for data set (iris, glass, spambase) then file path when running this script")
        print("Example: python runAlgorithms iris ./data/iris.data")
        exit()

    if sys.argv[1] == "glass":
        run_on_glass(sys.argv[2])
        exit()

    if sys.argv[1] == "iris":
        run_on_iris(sys.argv[2])
        exit()

    if sys.argv[1] == "spambase":
        run_on_spambase(sys.argv[2])
        exit()

    exit()

